var SyntaxExpression=require("./syntax-expression").SyntaxExpression,MathFunction={multiply:function(c,a){return c*a},divide:function(c,a){return c/a},subtract:function(c,a){return c-a},sum:function(c,a){return c+a}},MathFunctionMap=new Map([["*",function(a){return MathFunction.multiply(a[0],a[2])}],["/",function(a){return MathFunction.divide(a[0],a[2])}],["-",function(a){return MathFunction.subtract(a[0],a[2])}],["+",function(a){return MathFunction.sum(a[0],a[2])}]]);function Calculator(a){a&&this.calculate(a)}exports.default=Calculator,Calculator.prototype.calculate=function(a){var b=this;if("string"==typeof a||a instanceof String)return b.calculate(SyntaxExpression(a));return"number"==typeof a||a instanceof Number?a:a instanceof Array&&(a=function(a){return a.map(function(a,b){return a instanceof Array&&1==a.length?a[0]:a})}(a.map(function(a){return a instanceof Array?b.calculate(a):a})),Object.defineProperty(a,"position",{writable:!0,value:null}),!MathFunctionMap.forEach(function(a,b){this.position=this.includes(b)&&this.indexOf(b);for(var c,d=[];"number"==typeof(c=this.position)||c instanceof Number;)this.splice(this.position-1,3,a([this[this.position-1],this[this.position],this[this.position+1]])),d.push(this.position=this.includes(b)&&this.indexOf(b));return d}.bind(a)))?a[0]:void 0};